<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2020.1 (Build 215U)" ts="2021-07-14 16:32:10">
<Class name="MMA.SQL.JSONToSQL">
<Super>%Persistent</Super>
<TimeChanged>65898,80948.809729</TimeChanged>
<TimeCreated>65887,77784.431795</TimeCreated>

<Property name="TableName">
<Description>
SQL server table name</Description>
<Type>%String</Type>
</Property>

<Property name="MappingName">
<Description>
unique map name to differentiate JSON</Description>
<Type>%String</Type>
</Property>

<Method name="InsertMapping">
<ClassMethod>1</ClassMethod>
<FormalSpec>TableName,MapName</FormalSpec>
<Implementation><![CDATA[
	Set obj=..%New()
	Set obj.TableName=TableName
	Set obj.MappingName=MapName
	Do obj.%Save()
	Quit obj.%Id()
]]></Implementation>
</Method>

<Method name="OneTimeScript">
<Description>
This method is one time script to add the ADT messages json structure in this table</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//d ##class(MMA.SQL.JSONToSQL).OneTimeScript()
	#; ADT A01,A04,A05,A28,A08 common structure
	Set root=##class(MMA.SQL.JSONToSQL).%New()
	#; Here i assume Verato Tracking as SQL Server table name
	Set root.TableName="PatientLink"
	#; Here i assume VeratoADT01 as Unique mapping name for the messages A01,A04,A05,A28,A08
	Set root.MappingName="VeratoADT01"
	Do root.%Save()
	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="id"
 	#; root path of the json
 	Set obj.RootPath="content->linkIdentity->sources"
 	#; here i assume the MRN as SQL Server field name
 	Set obj.SQLFieldName="MRN"
 	Set obj.Type="Array"
 	Do obj.%Save()
 	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
 	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="name"
 	#; root path of the json
 	Set obj.RootPath="content->linkIdentity->sources"
 	#; here i assume the Source as SQL Server field name
 	Set obj.SQLFieldName="Source"
 	Set obj.Type="Array"
 	Do obj.%Save()
 	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
 	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="linkId"
 	#; root path of the json
 	Set obj.RootPath="content->linkIdentity"
 	#; here i assume the LinkID as SQL Server field name
 	Set obj.SQLFieldName="LinkID"
 	Set obj.Type="Field"
 	Do obj.%Save()
 	
 	
 	#; ADT A18 structure
	Set root=##class(MMA.SQL.JSONToSQL).%New()
	#; Here i assume Verato Tracking as SQL Server table name
	Set root.TableName="VeratoTracking"
	#; Here i assume VeratoADT18 as Unique mapping name for the messages A18
	Set root.MappingName="VeratoADT18"
	Do root.%Save()
	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="id"
 	#; root path of the json
 	Set obj.RootPath="content->toSurviveSource"
 	#; here i assume the trackId as SQL Server field name
 	Set obj.SQLFieldName="MRN"
 	Set obj.Type="Field"
 	Do obj.%Save()
 	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
 	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="name"
 	#; root path of the json
 	Set obj.RootPath="content->toSurviveSource"
 	#; here i assume the Source as SQL Server field name
 	Set obj.SQLFieldName="Source"
 	Set obj.Type="Field"
 	Do obj.%Save()
 	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
 	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="linkId"
 	#; root path of the json
 	Set obj.RootPath="content"
 	#; here i assume the LinkID as SQL Server field name
 	Set obj.SQLFieldName="LinkID"
 	Set obj.Type="Field"
 	Do obj.%Save()
 	
 	#; ADT A24 structure
	Set root=##class(MMA.SQL.JSONToSQL).%New()
	#; Here i assume Verato Tracking as SQL Server table name
	Set root.TableName="VeratoTracking"
	#; Here i assume VeratoADT24 as Unique mapping name for the messages A24
	Set root.MappingName="VeratoADT24"
	Do root.%Save()
	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="id"
 	#; root path of the json
 	Set obj.RootPath="content->linkToSource"
 	#; here i assume the MRN as SQL Server field name
 	Set obj.SQLFieldName="MRN"
 	Set obj.Type="Field"
 	Do obj.%Save()
 	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
 	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="name"
 	#; root path of the json
 	Set obj.RootPath="content->linkToSource"
 	#; here i assume the Source as SQL Server field name
 	Set obj.SQLFieldName="Source"
 	Set obj.Type="Field"
 	Do obj.%Save()
 	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
 	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="linkId"
 	#; root path of the json
 	Set obj.RootPath="content"
 	#; here i assume the LinkID as SQL Server field name
 	Set obj.SQLFieldName="LinkID"
 	Set obj.Type="Field"
 	Do obj.%Save()
 	
 	
 	#; Q22 common structure
	Set root=##class(MMA.SQL.JSONToSQL).%New()
	#; Here i assume Verato Tracking as SQL Server table name
	Set root.TableName="VeratoTracking"
	#; Here i assume VeratoQ22 as Unique mapping name for the messages Q22
	Set root.MappingName="VeratoQ22"
	Do root.%Save()
	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="id"
 	#; root path of the json
 	Set obj.RootPath="content->identity->sources"
 	#; here i assume the MRN as SQL Server field name
 	Set obj.SQLFieldName="MRN"
 	Set obj.Type="Array"
 	Do obj.%Save()
 	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
 	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="name"
 	#; root path of the json
 	Set obj.RootPath="content->identity->sources"
 	#; here i assume the Source as SQL Server field name
 	Set obj.SQLFieldName="Source"
 	Set obj.Type="Array"
 	Do obj.%Save()
 	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
 	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="linkId"
 	#; root path of the json
 	Set obj.RootPath="content->identity"
 	#; here i assume the LinkID as SQL Server field name
 	Set obj.SQLFieldName="LinkID"
 	Set obj.Type="Field"
 	Do obj.%Save()
 	
 	#; ADT A23 request
 	Set root=##class(MMA.SQL.JSONToSQL).%New()
	#; Here i assume PatientLink as SQL Server table name
	Set root.TableName="PatientLink"
	#; Here i assume VeratoA23 as Unique mapping name for the messages A23
	Set root.MappingName="VeratoA23"
	Do root.%Save()
	
	Set obj=##class(MMA.SQL.JSONToSQLMapping).%New()
	#; root id of the parent table
 	Set obj.RootId=root.%Id()
 	#; json field name
 	Set obj.JSONMapping="id"
 	#; root path of the json
 	Set obj.RootPath="content->linkIdsDeleted"
 	#; here i assume the MRN as SQL Server field name
 	Set obj.SQLFieldName="NativeIDDeleted"
 	Set obj.Type="Array"
 	Do obj.%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^MMA.SQL.JSONToSQLD</DataLocation>
<DefaultData>JSONToSQLDefaultData</DefaultData>
<IdLocation>^MMA.SQL.JSONToSQLD</IdLocation>
<IndexLocation>^MMA.SQL.JSONToSQLI</IndexLocation>
<StreamLocation>^MMA.SQL.JSONToSQLS</StreamLocation>
<Data name="JSONToSQLDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TableName</Value>
</Value>
<Value name="3">
<Value>MappingName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="MMA.SQL.JSONToSQLMapping">
<Super>%Persistent</Super>
<TimeChanged>65888,85285.105981</TimeChanged>
<TimeCreated>65887,77862.221332</TimeCreated>

<Property name="RootId">
<Description>
root table id </Description>
<Type>%Integer</Type>
</Property>

<Property name="JSONMapping">
<Description>
json root or field or array map name</Description>
<Type>%String</Type>
</Property>

<Property name="RootPath">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="SQLFieldName">
<Description>
SQL server field name</Description>
<Type>%String</Type>
</Property>

<Property name="Type">
<Description>
possible values - Field, Array</Description>
<Type>%String</Type>
</Property>

<Method name="InsertChild">
<ClassMethod>1</ClassMethod>
<FormalSpec>RootId,MapName,SQLFieldName,Type,Sequence,SubRoot</FormalSpec>
<Implementation><![CDATA[
	Set obj=..%New()
	Set obj.RootId=RootId
	Set obj.JSONMapping=MapName
	Set obj.SQLFieldName=SQLFieldName
	Set obj.Type=Type
	Set obj.Sequence=Sequence
	Set obj.SubRoot=SubRoot
	Do obj.%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^MMA.SQL.JSONToSQLMappingD</DataLocation>
<DefaultData>JSONToSQLMappingDefaultData</DefaultData>
<IdLocation>^MMA.SQL.JSONToSQLMappingD</IdLocation>
<IndexLocation>^MMA.SQL.JSONToSQLMappingI</IndexLocation>
<StreamLocation>^MMA.SQL.JSONToSQLMappingS</StreamLocation>
<Data name="JSONToSQLMappingDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>RootId</Value>
</Value>
<Value name="3">
<Value>JSONMapping</Value>
</Value>
<Value name="4">
<Value>SQLFieldName</Value>
</Value>
<Value name="5">
<Value>Type</Value>
</Value>
<Value name="6">
<Value>Sequence</Value>
</Value>
<Value name="7">
<Value>SubRoot</Value>
</Value>
<Value name="8">
<Value>RootPath</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="MMA.SQL.Request">
<Super>%Persistent</Super>
<TimeChanged>65887,77899.473669</TimeChanged>
<TimeCreated>65887,77898.695795</TimeCreated>

<Property name="JSON">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MappingName">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^MMA.SQL.RequestD</DataLocation>
<DefaultData>RequestDefaultData</DefaultData>
<IdLocation>^MMA.SQL.RequestD</IdLocation>
<IndexLocation>^MMA.SQL.RequestI</IndexLocation>
<StreamLocation>^MMA.SQL.RequestS</StreamLocation>
<Data name="RequestDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>JSON</Value>
</Value>
<Value name="3">
<Value>MappingName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="MMA.SQL.SQLOutbound">
<Super>%Persistent</Super>
<TimeChanged>65894,79603.790526</TimeChanged>
<TimeCreated>65887,77988.832005</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.SQL.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="SampleCall">
<FormalSpec>pRequest:POC.BO.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK
	Set MapName=pRequest.MappingName,RootId="",tablename=""
	Set JSONObj={}.%FromJSON(pRequest.JSON)

	&SQL(Select Id,TableName into :RootId,:tablename from MMA_SQL.JSONToSQL where MappingName=:MapName)
	If RootId>0
	{
		Do ##class(MMA.SQL.SQLOutbound).ReadFieldAndValues(JSONObj,RootId,.Array,.IsArray)
		If IsArray=1
		{
			For loop=0:1
			{
				Set Where=..FrameWhere(.Array,IsArray,loop,.isQueryOk,1)
				Quit:isQueryOk=0
				Set ReadSQL="Select Id from "_tablename_" where "_Where
				Set tSC=..Adapter.ExecuteQuery(.rs,ReadSQL)
				Do rs.%Next()
				Set Id=rs.%GetData(1)
				If Id>0
				{
					Set WriteSQL="UPDATE "_tablename_" SET "_..FrameWhere(.Array,IsArray,loop,.isQueryOk,2)_",DateTime="_$zdt($h,3)_" WHERE Id="_Id
					Set tSC=..Adapter.ExecuteUpdate(,WriteSQL)
				}
				Else
				{
					Set WriteSQL="INSERT INTO "_tablename_"("_..FrameWhere(.Array,IsArray,loop,.isQueryOk,1)_",DateTime) VALUES("_..FrameWhere(.Array,IsArray,loop,.isQueryOk,2)_","_$zdt($h,3)_")"
					Set tSC=..Adapter.ExecuteUpdate(,WriteSQL)
				}
			}
		}
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="FrameWhere">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&Array,isArray:%Integer=0,pos,&isQueryOk,Flag:%Integer=0]]></FormalSpec>
<Implementation><![CDATA[
	Set FieldName="",Where="",isQueryOk=1
	For
	{
		Set FieldName=$O(Array(FieldName),1,value)
		Quit:FieldName=""
		If $D(Array(FieldName))=1
		{
			If Flag=3
			{
				If Where=""
				{
					Set Where=FieldName
				}
				Else
				{
					Set Where=Where_","_FieldName
				}
			}
			ElseIf Flag=4
			{
				If Where=""
				{
					Set Where="'"_value_"'"
				}
				Else
				{
					Set Where=Where_","_"'"_value_"'"
				}
			}
			Else
			{
				If Where=""
				{
					Set Where=FieldName_"='"_value_"'"
				}
				Else
				{
					Set Where=Where_$Case(Flag,1:" AND ",2:" , ")_FieldName_"='"_value_"'"
				}
			}
		}
		ElseIf isArray=1
		{
			If $D(Array(FieldName,pos))
			{
				If Flag=3
				{
					If Where=""
					{
						Set Where=FieldName
					}
					Else
					{
						Set Where=Where_","_FieldName
					}
				}
				ElseIf Flag=4
				{
					If Where=""
					{
						Set Where="'"_$G(Array(FieldName,pos))_"'"
					}
					Else
					{
						Set Where=Where_","_"'"_$G(Array(FieldName,pos))_"'"
					}
				}
				Else
				{
					If Where=""
					{
						Set Where=FieldName_"='"_$G(Array(FieldName,pos))_"'"
					}
					Else
					{
						Set Where=Where_$Case(Flag,1:" AND ",2:" , ")_FieldName_"='"_$G(Array(FieldName,pos))_"'"
					}
				}
			}
			Else
			{
				Set isQueryOk=0
			}
		}
		
	}
	Quit Where
]]></Implementation>
</Method>

<Method name="ReadFieldAndValues">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[JSONObj,RootId,&Prepare,&IsArray]]></FormalSpec>
<Implementation><![CDATA[
	Set IsArray=0
	Do ..ConvertJSONToArray(JSONObj,"",.Array)
	Set rs=##class(%ResultSet).%New()
	Set sc=rs.Prepare("Select RootPath,JSONMapping,SQLFieldName,Type from MMA_SQL.JSONToSQLMapping where RootId="_RootId)
	Set sc=rs.Execute()
	While(rs.Next())
	{
		Set RootPath=rs.GetData(1)
		Set JSONMapping=rs.GetData(2)
		Set SQLFieldName=rs.GetData(3)
		Set Type=rs.GetData(4)
		If Type="Field"
		{
			Set Prepare(SQLFieldName)=$G(Array(RootPath_"->"_JSONMapping))
		}
		ElseIf Type="Array"
		{
			Set IsArray=1
			For inc=0:1
			{
				Quit:'$D(Array(RootPath_"->"_inc_"->"_JSONMapping))
				Set Prepare(SQLFieldName,inc)=Array(RootPath_"->"_inc_"->"_JSONMapping)
			}
		}
		
	}
]]></Implementation>
</Method>

<Method name="ConvertJSONToArray">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[JSONObj,Root:%String="",&Array]]></FormalSpec>
<Implementation><![CDATA[
	If $IsObject(JSONObj)
	{
		Set iter=JSONObj.%GetIterator()
		Set Key=""
		For
		{
			Quit:'iter.%GetNext(.Key,.value)
			Set Pass=Key
			If Root'=""
			{
				Set Pass=Root_"->"_Key
			}
			If $IsObject(value) 
			{
				Do ..ConvertJSONToArray(value,Pass,.Array)
			}
			ElseIf Root'=""
			{
				Set Array(Root_"->"_Key)=value
			}
			Else
			{
				Set Array(Key)=value
			}
		}
	}
]]></Implementation>
</Method>

<Method name="FrameFields">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&Array,isArray:%Integer=0,pos,&isQueryOk,Flag:%Integer=0]]></FormalSpec>
<Implementation><![CDATA[
	Set FieldName="",Where="",isQueryOk=1
	For
	{
		Set FieldName=$O(Array(FieldName),1,value)
		Quit:FieldName=""
		If $D(Array(FieldName))=1
		{
			If Where=""
			{
				Set Where=$Case(Flag,1:FieldName,2:"'"_value_"'")
			}
			Else
			{
				Set Where=Where_","_$Case(Flag,1:FieldName,2:"'"_value_"'")
			}
		}
		ElseIf isArray=1
		{
			If $D(Array(FieldName,pos))
			{
				If Where=""
				{
					Set Where=$Case(Flag,1:FieldName,2:"'"_$G(Array(FieldName,pos))_"'")
				}
				Else
				{
					Set Where=Where_","_$Case(Flag,1:FieldName,2:"'"_$G(Array(FieldName,pos))_"'")
				}
			}
			Else
			{
				Set isQueryOk=0
			}
		}
		
	}
	Quit Where
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
  <MapItem MessageType="MMA.SQL.Request">
    <Method>SampleCall</Method>
  </MapItem>
</MapItems>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^MMA.SQL.SQLOutboundD</DataLocation>
<DefaultData>SQLOutboundDefaultData</DefaultData>
<IdLocation>^MMA.SQL.SQLOutboundD</IdLocation>
<IndexLocation>^MMA.SQL.SQLOutboundI</IndexLocation>
<StreamLocation>^MMA.SQL.SQLOutboundS</StreamLocation>
<Data name="SQLOutboundDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Adapter</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="MMA.SQL.tmpStore">
<Super>%Persistent</Super>
<TimeChanged>65887,77940.158071</TimeChanged>
<TimeCreated>65887,77939.465984</TimeCreated>

<Property name="Value1">
<Type>%String</Type>
</Property>

<Property name="Value2">
<Type>%String</Type>
</Property>

<Property name="Value3">
<Type>%String</Type>
</Property>

<Index name="IdxValue">
<Properties>Value1,Value2,Value3</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^MMA.SQL.tmpStoreD</DataLocation>
<DefaultData>tmpStoreDefaultData</DefaultData>
<IdLocation>^MMA.SQL.tmpStoreD</IdLocation>
<IndexLocation>^MMA.SQL.tmpStoreI</IndexLocation>
<StreamLocation>^MMA.SQL.tmpStoreS</StreamLocation>
<Data name="tmpStoreDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Value1</Value>
</Value>
<Value name="3">
<Value>Value2</Value>
</Value>
<Value name="4">
<Value>Value3</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="MMA.TCP.Receiver">
<Super>Ens.BusinessService</Super>
<TimeChanged>65911,80497.661427</TimeChanged>
<TimeCreated>65908,77163.913276</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.TCP.CountedInboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%Stream.Object,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK
	Set ^Test=pInput.Read(64000)
	$$$TRACE(pInput.Read(64000))
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="MMA.TCP.RequestInput">
<Super>%Persistent</Super>
<TimeChanged>65911,80825.870264</TimeChanged>
<TimeCreated>65911,80822.682562</TimeCreated>

<Property name="TCPStream">
<Type>Ens.StreamContainer</Type>
</Property>

<Property name="Port">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^MMA.TCP.RequestInputD</DataLocation>
<DefaultData>RequestInputDefaultData</DefaultData>
<IdLocation>^MMA.TCP.RequestInputD</IdLocation>
<IndexLocation>^MMA.TCP.RequestInputI</IndexLocation>
<StreamLocation>^MMA.TCP.RequestInputS</StreamLocation>
<Data name="RequestInputDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TCPStream</Value>
</Value>
<Value name="3">
<Value>Port</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="MMA.TCP.Sender">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65912,45340.882053</TimeChanged>
<TimeCreated>65911,81441.388039</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.TCP.CountedOutboundAdapter</Default>
</Parameter>

<Method name="OnMessage">
<FormalSpec>pRequest:Ens.StreamContainer,*pResponse:%Persistent</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set SessionId=..%SessionId
	Set Start=$O(^Ens.MessageHeaderI("SessionId",SessionId,""))
	Set obj=##class(Ens.MessageHeader).%OpenId(Start)
	Set Source=obj.SourceConfigName
	Set Port=##class(Ens.Director).GetItemSettingValue(Source,"Adapter","Port",.status)
	Set ..Adapter.Port=Port
	Quit:'$IsObject(pRequest.Stream) $$$ERROR($$$EnsErrGeneral,"No Stream contained in StreamContainer Request")
	Set tSC=..Adapter.SendMessageStream(pRequest.Stream,.tReplyStream)  Quit:$$$ISERR(tSC) tSC
	If ..Adapter.GetReply {
		Set tReply=tReplyStream.Read()
		If $Case(tReply,"":0,"OK":0,:1) {
			Set tSC=$$$ERROR($$$EnsErrGeneral,"Remote acknowledgement not OK:"_$E(tReply,1,1000))
		}
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="MMA.Task.SearchNotification">
<Super>%SYS.Task.Definition</Super>
<TimeChanged>65898,80923.300955</TimeChanged>
<TimeCreated>65898,80876.015064</TimeCreated>

<Method name="OnTask">
<Description><![CDATA[
This task is intented to run on the Processing servers to help monitorize the production and have always up&running]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set LastRun=$G(^SearchNotificationConfig("LastRun"),$P($zdt($h,3,5),"+",1))
	Set CurrentRun=$P($zdt($h,3,5),"+",1)
	Set ^SearchNotificationConfig("LastRun")=CurrentRun
	If LastRun=CurrentRun Quit
	Do ..Initiate(LastRun,CurrentRun)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Initiate">
<ClassMethod>1</ClassMethod>
<FormalSpec>FromDateTime:%String,ToDateTime:%String</FormalSpec>
<Implementation><![CDATA[
	Set request=##class(Ens.StringContainer).%New()
	Set request.StringValue=FromDateTime_"^"_ToDateTime
	Set obj=##class(MMC.REST.SearchNotifications).%New("MMC.REST.SearchNotifications")
	Do obj.SearchNotifcation(request)
	Quit
]]></Implementation>
</Method>
</Class>


</Export>
